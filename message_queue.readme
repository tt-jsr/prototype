The MessageQueue class provides an event driven framework for processing messages.

Timers
    Timers are created with create_timer(). You can create one shot timers or repeating timers.
    You can cancel and pause timers and well as reset a timer.

    When a timer fires, a TIMER_EVENT is posted to the event queue

Digital read
    The digitalRead() sets up the reading of a digital pin. You can also provide 
    a timeout for debouncing the input.

    Only when the state of the pin changes from HIGH to LOW or LOW to HIGH will a VALUE_EVENT
    be posted to the queue.

Analog read
    The analogRead() call sets up the reading of an analog pin. A VALUE_EVENT will be posted 
    either on every call to get_message() or when a specified number of microseconds has elapsed.

    Each read generates a VALUE_EVENT.

Pulse output
    When toggleing a output pin for a specified duration, the canonical method to to write HIGH,
    delay, then write low. The delay will prevent any other work from being performed. Using
    the MessageQueue allows events to still be processed even during lengthy pulse durations.

State values
    Using create_value() to manage a state variable allows the user to set a value but only if the
    value actually changes value will a VALUE_EVENT message be posted.
